{-
    Contract Name: Staking Pool Contract (Reward-Based)
    Purpose: A staking pool smart contract that enables participants
             to contribute a fixed stake and distributes rewards 
             to selected winners upon pool closure.
    Author: Vsevolod V. Melyukov
    Created On: 01/01/2025
    Version: 0.0.1
-}

#include "./constants.fc";
#include "./getters.fc";
#include "./helpers.fc";
#include "./imports/stdlib.fc";

{-
    Pool structure:
        pool_id: int (unique identifier)
        owner: cell (address of the pool owner)
        stake: int (fixed stake amount)
        max_participants: int (maximum number of participants)
        participants: dict (dictionary of participants)
        winners: dict (dictionary of winners)
        ends_at: int (timestamp when the pool ends)
        created_ at: int (timestamp when the pool was created)
-}

{-
    ERROR CODES:
        33 - Invalid outer seqno. The current stored seqno is different from the one in the incoming message.
        36 - Pool not found. The pool with the specified identifier is not found. (cancelled, completed, or never existed)
        44 - Duplicate. Pool with the given id already exists.
        47 - Pool is already closed. User can not participate.
        52 - Pool is archived. This pool is no longer active.  
-}

;; Function to create a new pool
(cell, ()) ~store_pool(cell pools, int pool_id, int start_time, int end_time, int maximum_participants, int current_participant_count, int pool_flag, int stake_amount, cell participants, cell results, cell rewards, cell state) {
    pools~udict_set_builder(32, pool_id, begin_cell()
        .store_uint(start_time, 32) ;; protected, applies automatically on the chain
        .store_uint(end_time, 32) ;; assigned by the creator, can be modified
        .store_uint(maximum_participants, 32) ;; protected, assigned by the owner
        .store_uint(current_participant_count, 32) ;; will be modified on each pool join
        .store_uint(pool_flag, 64) ;; status of the pool, can be updated or changed by the pool owner
        .store_grams(stake_amount) ;; protected, assigned at the pool creation
        .store_dict(participants) ;; list of participants, will be updated on each pool join
        .store_dict(results) ;; list of winners, will be updated on pool closure
        .store_dict(rewards) ;; list of rewards, will be updated on pool closure
        .store_dict(state) ;; pool state, can be updated by the pool owner
    );

    return (pools, ());
}

;; Function to return the pool data
(slice, (int, int, int, int, int, int, cell, cell, cell, cell)) ~load_pool_fields(slice pool) {
    var fields = (
        pool~load_uint(32), ;; start_time
        pool~load_uint(32), ;; end_time
        pool~load_uint(32), ;; max_participants
        pool~load_uint(32), ;; current_participant_count
        pool~load_uint(64), ;; pool_flag
        pool~load_grams(), ;; stake_amount
        pool~load_dict(), ;; participants
        pool~load_dict(), ;; results
        pool~load_dict(), ;; rewards
        pool~load_dict() ;; state
    );
    return (pool, fields);
}

(slice, (int, int, int)) ~load_participant(slice participant) {
    var fields = (
        participant~load_int(8), ;; wc
        participant~load_uint(32), ;; address
        participant~load_grams() ;; stake_amount
    );
    return (participant, fields);
}

;; Simple money transfer
() send_money(int wc, int address, int amount) impure {
    send_raw_message(begin_cell()
        .store_uint(0xc4, 9)
        .store_int(wc, 8)
        .store_uint(address, 32)
        .store_grams(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .end_cell(), 3
    );
}

(int, int, cell) unpack_state() {
    slice cs = get_data().begin_parse();
    (int seq_no, int owner_pubkey, cell state) = (cs~load_uint(32), cs~load_uint(256), cs~load_dict());
    cs.end_parse();
    return (seq_no, owner_pubkey, state);
}

;; Function to pack the state
_ pack_state(int seqno, int owner_pubkey, cell pools) inline_ref {
    return begin_cell()
        .store_uint(seqno, 32)
        .store_uint(owner_pubkey, 256)
        .store_dict(pools)
        .end_cell();
}

() return_deposits(cell participants) impure {
    int player_pubkey = -1;
    do {
        (int player_pubkey, var entry, var f) = participants.udict_get_next?(32, player_pubkey);
        if (f) {
            var (player_wc, player_address, received_amount) = (entry~load_int(8), entry~load_uint(32), entry~load_grams());
            send_money(player_wc, player_address, received_amount);
        }
    } until (~ f);
}

() recv_internal(int balance, cell in_msg_cell, slice in_msg) impure {
    if (in_msg.slice_bits() < 32 + 64) { ;; ignore simple transfers
        return ();
    }

    slice cs = in_msg_cell.begin_parse();
    var flags = cs~load_uint(4); ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    if (flags & 1) { ;; ignore bounced
        return ();
    }

    if (in_msg.slice_empty?()) {
        return ();
    }

    slice addr_slice = cs~load_msg_addr();
    (int src_wc, int src_addr) = parse_std_addr(addr_slice);
    int op = in_msg~load_uint(32); ;; Load operation code from the message body

    (int stored_seqno, int owner_pubkey, cell pools) = unpack_state(); ;; Unpack state
    int query_id = in_msg~load_uint(64); ;; Load query ID from the message body

    if (op == OP_JOIN_POOL) {
        ;; Join to a pool
        int pool_id = in_msg~load_uint(32); ;; Load pool ID from the message body
        int staker_pubkey = in_msg~load_uint(32); ;; Load staker's public key
        (slice pool, int pool_found) = pools.udict_get?(32, pool_id); ;; Get pool data from the dictionary
        ifnot (pool_found) {
            return send_message_back(addr_slice, 0xfffffffe, query_id, op, 36, 0, 64);
        }
        
        (int start_time, int end_time, int max_participants, int current_participant_count, int pool_flag, int stake_amount, cell participants, cell results, cell rewards, cell state) = pool~load_pool_fields();
        (slice entry, int entry_found) = participants.udict_get?(32, staker_pubkey); ;; Check if the staker is already in the pool
        var (entry_wc, entry_addr, stake_amount) = (src_wc, src_addr, 0);
        if (entry_found) {
            (entry_wc, entry_addr, stake_amount) = entry~load_participant();
        }

        if (pool_flag & 0x8000000000000000) {
            return send_message_back(addr_slice, 0xfffffffe, query_id, op, 53, 0, 64);
        }
        if (now() > end_time) { ;; Pool is closed
            return send_message_back(addr_slice, 0xfffffffe, query_id, op, 47, 0, 64);
        }
        if (entry_found) {
            return send_message_back(addr_slice, 0xfffffffe, query_id, op, 52, 0, 64);
        }
        if (current_participant_count >= max_participants) {
            return send_message_back(addr_slice, 0xfffffffe, query_id, op, 51, 0, 64);
        }

        participants~udict_set_builder(32, staker_pubkey, begin_cell()
            .store_int(entry_wc, 8)
            .store_uint(entry_addr, 32)
            .store_coins(balance)
        );

        current_participant_count = current_participant_count + 1;
        ~dump(current_participant_count);

        pools~store_pool(pool_id, start_time, end_time, max_participants, current_participant_count, pool_flag, stake_amount, participants, results, rewards, state);
        set_data(pack_state(stored_seqno, owner_pubkey, pools));
        accept_message();
        return ();
    }

    ifnot(op & (1 << 31)) {
        ;; unknown query, return error
        return send_message_back(addr_slice, 0xfffffff, query_id, op, 0, 0, 64);
    }
}

() recv_external(slice in_msg) impure {
    ;; slice signature = in_msg~load_bits(512);
    (int msg_seqno, int op) = (in_msg~load_uint(32), in_msg~load_uint(32));
    
    (int stored_seqno, int owner_pubkey, cell pools) = unpack_state();
    throw_unless(33, msg_seqno == stored_seqno);
    stored_seqno = stored_seqno + 1;

    commit();
    accept_message();
    ;; throw_unless(34, check_signature(slice_hash(in_msg), signature, owner_pubkey));

    if (op == OP_CREATE_POOL) {
        int pool_id = in_msg~load_uint(32);
        cell pool_data = in_msg~load_ref(); ;; Load from reference
        (slice pool, int pool_found) = pools.udict_get?(32, pool_id);
        throw_if(44, pool_found);
        pools~udict_set(32, pool_id, pool_data.begin_parse());
    } elseif (op == OP_CANCEL_POOL) {
        ;; Cancel pool
        int pool_id = in_msg~load_uint(32);
        (slice pool, int pool_found) = pools.udict_get?(32, pool_id);
        throw_unless(36, pool_found);

        (int start_time, int end_time, int max_participants, int current_participant_count, int pool_flag, int stake_amount, cell participants, cell results, cell rewards, cell state) = pool~load_pool_fields();

        ifnot (pool_flag & 0x8000000000000000) {
            ;; Return all current stakes
            return_deposits(participants);
        }

        pools~udict_delete_get?(32, pool_id);
    } elseif (op == OP_UPDATE_POOL) {
        ;; Upgrade contract's code
        var code = in_msg~load_ref();
        set_code(code);
        ifnot(in_msg.slice_empty?()) {
            set_c3(code.begin_parse().bless());
        }
        throw(0);
    }

    ;; Update state with new seqno and modified pools
    return set_data(pack_state(stored_seqno, owner_pubkey, pools));
}

;; Returns list of active pools
_ get_pools() method_id {
    slice ds = get_data().begin_parse().skip_bits(32 + 256);
    cell pools = ds~load_dict();
    if (pools.null?()) {
        return nil;
    }

    var l = nil;
    int id = 0x7fffffff;
    int f = true;

    do {
        (id, slice pool, f) = pools.udict_get_prev?(32, id);
        if (f) {
            (int start_time, int end_time, int max_participants, int current_participant_count, int pool_flag, int stake_amount, cell participants, cell results, cell rewards, cell state) = pool~load_pool_fields();
            l = cons(pool_tuple(id, start_time, end_time, max_participants, current_participant_count, pool_flag, stake_amount, participants, results, rewards, state), l);
        }
    } until (~ f);

    return l;
}

;; Returns list of all participants in a game
_ get_participants(int pool_id) method_id {
    slice ds = get_data().begin_parse().skip_bits(32 + 256);
    ds~load_grams();
    cell pools = ds~load_dict();
    if (pools.null?()) {
        return nil;
    }

    (slice pool, int pool_found) = pools.udict_get?(32, pool_id);
    throw_unless(36, pool_found);
    (int start_time, int end_time, int max_participants, int current_participant_count, int pool_flag, int stake_amount, cell participants, cell results, cell rewards, cell state) = pool~load_pool_fields();

    var l = nil;
    int staker_pubkey = (1 << 255) + ((1 << 255) - 1);
    do {
        (staker_pubkey, var entry, var f) = participants.udict_get_prev?(256, staker_pubkey);
        if (f) {
            (int entry_wc, int entry_addr, int stake_amount) = entry~load_participant();
            l = cons(participant_tuple(staker_pubkey, entry_wc, entry_addr, stake_amount), l);
        }
    } until (~ f);
    return l;
}