#include "imports/stdlib.fc";

int equal_slices (slice a, slice b) asm "SDEQ";

() send_message_back(slice address, int ans_tag, int query_id, int body, int extra, int grams, int mode) impure {
    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(address)
        .store_grams(grams)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(ans_tag, 32)
        .store_uint(query_id, 64);
    
    if (body >= 0 ) {
        msg~store_uint(body, 32);
    }
    if (extra >= 0) {
        msg~store_uint(extra, 32);
    }
    send_raw_message(msg.end_cell(), mode);
}

tuple pool_tuple(int pool_id, int start_time, int end_time, int max_participants, int current_participant_count, int pool_flag, int stake_amount, cell participants, cell results, cell rewards, cell state) 
    asm(pool_id start_time end_time max_participants current_participant_count pool_flag stake_amount participants results rewards state) "11 TUPLE";

tuple participant_tuple(int staker_pubkey, int entry_wc, int entry_address, int stake_amount) asm(staker_pubkey entry_wc entry_address stake_amount) "4 TUPLE";