{-
    Contract Name: Staking Pool Ticket Contract (Reward-Based)
    Purpose: A staking pool smart contract that enables participants
             to contribute a fixed stake and distributes rewards 
             to selected winners upon pool closure.
    Author: Vsevolod V. Melyukov
    Created On: 01/01/2025
    Version: 0.0.1
-}

#include "./constants.fc";
#include "./imports/stdlib.fc";

int slices_equal?(slice a, slice b) asm "SDEQ";
int my_tons() asm "BALANCE" "FIRST";

{-
    Ticket structure:
        - pool_id: int - id of the pool
        - ticket_price: int - price of the ticket
        - stakers: dict - address dictionary of users
            - {timestamp - int - timestamp of the ticket creation}

    Pool structure:
        - pool_id: int - id of the pool
        - ticket_price: int - amount of the stake
        - max_participant_count: int - maximum number of participants
        - current_participant_count: int - current number of participants

    State structure:
        - seqno: int - sequence number of the pool
        - random_locked: int - 0 - unlocked, 1 - locked
        - owner_pubkey: int - public key of the pool owner
        - owner_addr: slice - owner address
        - ecvrf_addr: slice - ecvrf coordinator contract address
        - pools: cell - dictionary of pools
        - tickets: cell - dictionary of tickets
-}

{-
    Error codes and their meanings:
        30 - The message is expired
        33 - Incorrect message seqno
        36 - Signature verification failed
        40 - Pool not found
        41 - Ticket not found
-}

;; Function to pack the state
_ pack_state(int seqno, int random_locked, int owner_pubkey, slice owner_addr, slice ecvrf_addr, cell pools, cell tickets) inline_ref {
    return begin_cell()
        .store_uint(seqno, 32)
        .store_uint(random_locked, 1)
        .store_uint(owner_pubkey, 256)
        .store_ref(
        begin_cell()
                    .store_slice(owner_addr) ;; 267 bit
                    .store_slice(ecvrf_addr) ;; 267 bit
                    .end_cell()
    )
        .store_dict(pools)
        .store_dict(tickets)
        .end_cell();
}

;; Function to unpack the state
(int, int, int, slice, slice, cell, cell) unpack_state() {
    slice cs = get_data().begin_parse();

    int seq_no = cs~load_uint(32);
    int random_locked = cs~load_uint(1);
    int pubkey = cs~load_uint(256);

    slice adrs = cs~load_ref().begin_parse();
    (slice owner_addr, slice ecvrf_addr) = (adrs~load_msg_addr(), adrs~load_msg_addr());

    cell pools = cs~load_dict();
    cell tickets = cs~load_dict();
    cs.end_parse();

    return (seq_no, random_locked, pubkey, owner_addr, ecvrf_addr, pools, tickets);
}

;; Function to assign a new ticket
(cell, ()) ~store_ticket(cell tickets, int pool_id, int ticket_price, cell stakers) {
    tickets~udict_set_builder(32, pool_id, begin_cell()
        .store_uint(pool_id, 32) ;; in terms of safety, store pool_id twice
        .store_uint(ticket_price, 64)
        .store_dict(stakers) ;; store stakers dictionary
    );

    return (tickets, ());
}

;; Function to return the ticket data
(slice, (int, int, cell)) ~load_ticket_fields(slice ticket) {
    var fields = (
        ticket~load_uint(32), ;; pool_id
        ticket~load_uint(64), ;; ticket_price
        ticket~load_dict() ;; stakers
    );

    return (ticket, fields);
}

;; Function to store a new pool
(cell, ()) ~store_pool(cell pools, int pool_id, int ticket_price, int max_participant_count, int current_participant_count) {
    pools~udict_set_builder(32, pool_id, begin_cell()
        .store_uint(pool_id, 32)
        .store_uint(ticket_price, 64)
        .store_uint(max_participant_count, 32)
        .store_uint(current_participant_count, 32)
    );

    return (pools, ());
}

;; Function to retrun the pool data
(slice, (int, int, int, int)) ~load_pool_fields(slice pool) {
    var fields = (
        pool~load_uint(32), ;; pool_id
        pool~load_uint(64), ;; ticket_price
        pool~load_uint(32), ;; max_participant_count
        pool~load_uint(32)  ;; current_participant_count
    );

    return (pool, fields);
}

;; Simple message to send coins with comment
() send_simple_message(slice address, int amount, slice comment, int mode) impure {
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    if (comment.slice_bits()) {
        msg.store_uint(0, 32);
        msg.store_slice(comment);
    } else {
        msg.store_uint(0, 1);
    }

    return send_raw_message(msg.end_cell(), mode);
}

int calculate_stake_amount(int amount) {
    return amount + platform_fee;
}

() recv_internal(int balance, cell in_msg_cell, slice in_msg) impure {
    throw(0);
    slice cs = in_msg_cell.begin_parse();
    var flags = cs~load_uint(4); ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    if (flags & 1) { ;; ignore bounced
        return ();
    }

    if (in_msg.slice_empty?()) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr(); ;; no need to parse workchain information from the address
    int op = in_msg~load_uint(32); ;; Load operation code from the message body

    ;; Unpack current contract state
    (int stored_seqno, int random_locked, int owner_pubkey, slice owner_addr, slice ecvrf, cell pools, cell tickets) = unpack_state(); ;; Unpack state

    int query_id = in_msg~load_uint(64); ;; Load query id from the message body
    if (query_id < now() - 120) {
        return send_simple_message(sender_addr, balance, "TONite refund!", 64);
    }

    ;; parse staker addr from slice
    (int wc, int addr) = parse_std_addr(sender_addr);

    if (op == OP_DEPOSIT) {
        if (slices_equal?(sender_addr, owner_addr)) {
            ;; Deposit funds to the contract
            return ();
        }
    } elseif (op == OP_BUY_TICKET) {
        ;; Buy ticket for the pool
        int pool_id = in_msg~load_uint(32); ;; Load pool id from the message body

        (slice pool, int pool_found) = pools.udict_get?(32, pool_id); ;; Get pool data from the dictionary
        ifnot (pool_found) {
            return send_simple_message(sender_addr, balance, "Pool not found!", 64);
        }

        (slice ticket, int ticket_found) = tickets.udict_get?(32, pool_id); ;; Get ticket data from the dictionary

        ;; Preload stakers dictionary
        cell stakers = ticket.preload_dict();

        ;; Check if the user already joined the pool
        (slice staker, int staker_found) = stakers.udict_get?(256, addr);
        if (staker_found) {
            return send_simple_message(sender_addr, balance, "You already joined!", 64);
        }

        ;; Load pool fields
        (int pool_id, int ticket_price, int max_participant_count, int current_participant_count) = pool~load_pool_fields();

        ;; Calculate stake amount
        int stake_amount = calculate_stake_amount(ticket_price);

        ;; Check if the staker has enough balance
        if (balance < stake_amount) {
            return send_simple_message(sender_addr, balance, "Not enough balance!", 64);
        }

        ;; Check if the pool is full
        if (current_participant_count >= max_participant_count) {
            return send_simple_message(sender_addr, balance, "Pool is full!", 64);
        }

        ;; Increment participant count
        current_participant_count += 1;

        ;; Store the updated pool
        pools~store_pool(pool_id, ticket_price, max_participant_count, current_participant_count);

        ;; Store the staker
        stakers.udict_set_builder(256, addr, begin_cell().store_uint(32, now()));
        
        ;; Assign a ticket to the user
        tickets~store_ticket(pool_id, ticket_price, stakers);
    } else {
        return send_simple_message(sender_addr, balance, "Unknown op!", 64);
    }

    throw(0xfffffffe);
}

() recv_external(slice in_msg) impure {
    slice signature = in_msg~load_bits(512);

    ;; Load message seqno, valid_until and operation code from in message
    (int msg_seqno, int valid_until, int op) = (in_msg~load_uint(32), in_msg~load_uint(32), in_msg~load_uint(32));

    ;; Check if the message is expired
    throw_if(30, valid_until < now() + 10);

    commit();
    accept_message();

    ;; Unpack current contract state
    (int stored_seqno, int random_locked, int owner_pubkey, slice owner_addr, slice ecvrf_addr, cell pools, cell tickets) = unpack_state();

    ;; Check if the message seqno is correct
    throw_unless(33, msg_seqno == stored_seqno);
    stored_seqno += 1;

    ;; Load the public key from the message and verify the signature
    int verify = check_signature(slice_hash(in_msg), signature, owner_pubkey);
    throw_unless(36, verify);

    if (op == OP_CREATE_POOL) {
        int pool_id = in_msg~load_uint(32);
        cell pool_data = in_msg~load_ref(); ;; Load from reference

        ;; Check if the pool already exists
        (slice pool, int pool_found) = pools.udict_get?(32, pool_id);
        throw_if(44, pool_found);

        ;; Save pool data
        pools~udict_set(32, pool_id, pool_data.begin_parse());
    } elseif (op == OP_UPDATE_CODE) {
        ;; Upgrade contract's code
        var code = in_msg~load_ref();
        set_code(code);

        ifnot(in_msg.slice_empty?()) {
            set_c3(code.begin_parse().bless());
        }
    } elseif (op == OP_WITHDRAW) {
        ;; Withdraw funds
        send_simple_message(owner_addr, my_tons(), "withdraw", 128);
    } else {
        send_simple_message(owner_addr, my_tons(), "Unknown op!", 128);
    }

    ;; Update state with new seqno and modified pools
    return set_data(pack_state(stored_seqno, random_locked, owner_pubkey, owner_addr, ecvrf_addr, pools, tickets));
}

;; Return the list with the provided pool_id
(int, int, int, int) get_pool(int pool_id) method_id {
    slice ds = get_data().begin_parse().skip_bits(32 + 1 + 256);

    ;; Skip reference cell
    ds~load_ref();

    ;; Load pools dictionary
    cell pools = ds~load_dict();
    if (pools.null?()) {
        throw(40);
    }

    (slice pool, int success) = pools.udict_get?(32, pool_id);
    return pool~load_pool_fields();
}

;; Return ticket information for the provided staker address
(int, int, cell) ticket(slice staker_addr) method_id {
    slice ds = get_data().begin_parse().skip_bits(32 + 1 + 256);
    
    ;; Skip reference cell
    ds~load_ref();

    ;; Load staker address
    (int wc, int addr) = parse_std_addr(staker_addr);

    ;; Skip pools dictionary
    ds~load_dict();

    ;; Load tickets dictionary
    cell tickets = ds~load_dict();
    if (tickets.null?()) {
        throw(41);
    }

    (slice ticket, int success) = tickets.udict_get?(256, addr);
    ifnot (success) {
        throw(41);
    }

    return ticket~load_ticket_fields();
}

;; Returns current sequence number
int seqno() method_id {
    return get_data().begin_parse().preload_uint(32);
}

;; Returns owner's pubkey
slice owner_pubkey() method_id {
    slice ds = get_data().begin_parse().skip_bits(32);
    return begin_cell().store_uint(ds~load_uint(32), 32).end_cell().begin_parse();
}
